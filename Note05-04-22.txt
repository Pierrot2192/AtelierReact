-Matin sera peu être à l'arache
-login de compte, on va le regaire ensemble, on aura le dashboard avec le necessaire
-par contre créer un compte sera a nous bde le faire et de le tester
-si ID invalid; on a un pup up avec une erreur et mdp incorrect, mais is bon ID, on arrive sur dashboard
-sur dashboard, différetn type d'user; qd creation de compte, mon compte est lié à pls type d'user
-donc mtn que j'essaye d'accéder compte USER: peu y accédé
-ADMIn: on a pas acces au contenu admin mais on a acces au contenu MOD
-Sedeco: on se déco
-Ds le stockage on a un cookie d'auth; qui permet de dire que sebastien est co avec tel clef
-qui lui donne acces a certain contenu (mod et user)
-on est censé avoir la clef qui disparait qd on se déco
-nous faudra créer un compte, 
-a retirer les certif de secu dans app.prop => fait pas de rqte en https
-
-va mettre en place le bend, le login
-fait un dossier et recup le git
npx degit https://github.com/remadex/atelier-devops-project.git .
-lancer le backend
-ici va dabs le dossier db-docker, il a créer un docker-compose; qui contient une db, testdb etc
-va juste venir importer une db qu'il a déjà créer
-> peu être bien d'utilisre le docker pour plus de simplicité, comme ça toute la bdd est déjà faite
-pcq sinon faut recrer, vu que pas sur mon pc, alors pas refait les comptes (mod, user et admin)
-et je sais plsu si j'ai noté les commande)
-de plus le bend n'est pas le mm que ce qu'on a fait en cours
-ici il a mis l'adrress d'origin de la db, et il a aauthorisé les credential, donc les reqte avec des cookie avec allowcredntial
-pour démarre le projet java, une fois que le back/docker tourne, lui il a da,s vscode le run pour lacer sontspringbootlogin example
-normalement les requete dans insomnia sont déjà préfaite (avec l'url etc )
-bon bref le docker de la db dois fonctionné
-et le backend dois aussi être lancer du coup 
-nvm install (ou npm je ne sais pas tres bien)dans le dossier front end pour lancer le front end
-npm run dev
-LIGNE 114 enlever le onCLick=logout  ilf audrait l'enlever ausis dans Dashboard.jsx
-Deplacment du dossir .vscode a la racine du projet, cela permet d'avoir le prettier
-normalement on devrait avoir le dashboard

-on va review le code mtn
-tailwindconfig js tjs present; viteconfig pour gérer app webpour faire des serv local pour.....?
-ds package.json, on retrouve tjs les dpdpc pour notre projet et les scripts pour lancer notre projet, ici dev le + important
-react et react dom pour afficher projet htlm ? 
-dpdce retrv eslint etc, et ausis formik, pour faire de la validation de formaulaire, qji est compléter avec yup, outil pour gérer les regex pour les champs
-react-select, permet d'utiliser un select avec react
-on va aussi utiliser hot-toast, petit "toast" ou popup pour avoir cela, etrouter-dom, plugin le + important, ? mais ça sert à quoi ?
-niveau fichier, on tretrouver dossier public, servira a contenir nos ressource publique, police ecriture icone etc
-src, là ou il y a ensmelbe fichier necessaire pour faire tourner le site, assets; .Css mais fera css dans nos fichier jsx
-main.jsx est notre point d'entrée qui est appelé dans l'index.html
-dans ce fichier on appel react et on crée notre?? dans notre html
-on appel notre app.jsx ou l 'on retrouv enotre router, c ici qu'on définis les comportement de nos routes
-donc / qui est la home, qui retournera le component home
-et on fait les osu route de / -> admin; moderator ou user
-on a ausis les route login et register
-ensuite le toaster, c'est la petite popup 
-pour régler la position, sa durée, etc etc
-ici s'applique de manière globale mais pourra le faire de manière spécifique
-dnas l'autre dossier pages on y retrouve des trucs
-pas forcement le truc le plus scalable mais ça suffis ici
-ou y retrouve les différentes pages
-dashboard avec un component .jsx
-la page 'home' un peu useless
-la page login, contient le code html pour ntreo page login
-la page register aussi 
-c les pages que j'affiche
-ensuite on retrouve le dossier components, ou n est censé retrouve nos compoenent
-on va surtout bosser dans les pages ici nous
-

-on va alors dans le login.jsx
-on y retrouve un nom utilisateur et un mdp
-on a bcp de tailwind au dessus mais bref, faut pas trop s'en occupé
-qd bosse avec react, c d clasName et pas des class
-on a not deux input avec nos svg (des icons)

-pass dans la partie validation
-on utilise l'outil formik
-permet de faire de la validration etc
-déjà peu mettre des accolade{}); en debut et fin de const Login = () => {...});
- on peu mtn mettre une const formik = useFormik(qui est un hook, qui est censé s'importé automatiquement)
- on donne les val initiale qui seront ici nos valeur par défaut, username: 'test, password: '',
-ensuite on passe le schema de validation: validationSchema: Yup
- dans le Yup.object({}), yup déjà peu faire en sorte de créer des chema de validaiton, on y met des clef et des 'fction' qui indique quel champ doit être requit ou nom pour le schéma et quel type ils doivent être pour être ok
-bref on fait des truc sdedans pour lui dire que les champs x et y sont string et requitresd avec des trus dedans mais je sais pas quand ça s'affiche
-après on fera une aciton onSubmit qu'on va def après mais on lui demandera jsute d'afficheir des valuers
-ensuite on va dans notre formulaire plus bas, et dans la balise sur le meme pied que className, on indique onSubmit={(e) => et plein de truc  pour je ne sais torp quoi faire
-ensuite plus bnas das notre balise input de l'user name on lui ajoute un value={formik.values.username}
-la je suis larguer
-





























